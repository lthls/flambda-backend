(**************************************************************************)
(*                                                                        *)
(*                                 OCaml                                  *)
(*                                                                        *)
(*                         Vincent Laviron, OCamlPro                      *)
(*                                                                        *)
(*   Copyright 2023 OCamlPro, SAS                                         *)
(*                                                                        *)
(*   All rights reserved.  This file is distributed under the terms of    *)
(*   the GNU Lesser General Public License version 2.1, with the          *)
(*   special exception on linking described in the file LICENSE.          *)
(*                                                                        *)
(**************************************************************************)

(** Types related to the compilation of value let-recs (non-functional
     recursive definitions) *)

(** The kind of recursive bindings, as computed by
    [Rec_check.classify_expression] *)
type recursive_binding_kind =
| Static
  (** The expression evaluates to a function or block of a
      statically known size.
      It will be pre-allocated and back-patched later.
      The expression can refer to recursive variables as long as it
      does not inspect them during its evaluation. *)
| Constant
  (** The expression evaluates to a value that does not contain any
      occurrence of a recursive variable.
      Combined with the invariant that recursive variables must never be
      examined during the definitions, this special case allow using the
      same rules as Static bindings (i.e. allow guarded occurrences of
      recursive variables in the expression) for values that cannot be
      back-patched (unit, integers, empty arrays, ...). *)
| Not_recursive
  (** Non recursive bindings. Arbitrary expressions, that are not allowed to
      refer to any recursive variable. *)
| Class
  (** Bindings generated by the compilation of objects and classes.
      These bindings are generated in Lambda form directly and never go through
      [Rec_check], so to avoid re-implementing the classification pass on Lambda
      we simply identify this special case with a dedicated constructor. *)
